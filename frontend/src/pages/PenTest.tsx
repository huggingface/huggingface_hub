import React, { useState } from 'react';

interface PenTestResult {
  success: boolean;
  message: string;
  logs: string[];
}

const PenTest: React.FC = () => {
  const [targetUrl, setTargetUrl] = useState('');
  const [result, setResult] = useState<PenTestResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setResult(null);
    setMessage('');

    try {
      const response = await fetch('/api/pentest', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ targetUrl }),
      });

      if (response.ok) {
        const data = await response.json();
        setResult(data);
      } else {
        const errorText = await response.text();
        setMessage(`Error: ${errorText}`);
      }
    } catch (error) {
      setMessage(`An unexpected error occurred: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div>
      <h2>Penetration Testing</h2>
      <p>Enter a product page URL to simulate an 'Add to Cart' action.</p>
      <form onSubmit={handleSubmit}>
        <input
          type="url"
          value={targetUrl}
          onChange={(e) => setTargetUrl(e.target.value)}
          placeholder="https://example.com/product/123"
          required
        />
        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Running Test...' : 'Start Test'}
        </button>
      </form>
      {message && <p>{message}</p>}
      {result && (
        <div>
          <h3>Test Results</h3>
          <p>
            <strong>Status:</strong> {result.success ? 'Success' : 'Failure'}
          </p>
          <p>
            <strong>Message:</strong> {result.message}
          </p>
          <h4>Logs:</h4>
          <pre>
            {result.logs.join('\n')}
          </pre>
        </div>
      )}
    </div>
  );
};

export default PenTest;
